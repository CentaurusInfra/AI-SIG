syntax = "proto3";
package dbus;
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

enum RC {
    CONNECTED = 0;
    NO_USER = 1;
    WRONG_PASSWORD = 2;
    DISCONNECTED = 3;
    FAILED = 4;
    REGISTERED = 5;
}

message Credential {
    string username = 1;
    string password = 2;
}
message S3Auth {
    string aws_access_key_id = 1;
    string aws_secret_access_key = 2;
    string region_name = 3;
}

// set up connection between user and GM
service Connection {
    rpc connect (ConnectRequest) returns (ConnectResponse) {}
}
message ConnectRequest {
    Credential cred = 1;
    S3Auth s3auth = 2;
    bool createUser = 3;
}
message ConnectResponse {
    RC rc = 1;
    string resp = 2;
}

// register a DLT Client (DLTC) to the Global Manager (GM)
service Registration {
    rpc register (RegisterRequest) returns (RegisterResponse) {}
    rpc deregister (DeregisterRequest) returns (DeregisterResponse) {}
}
message ResourceInfo { // Pod resource info, load from proc file system
    int32 CPUMemoryFree = 1;
    int32 GPUMemoryFree = 2;
}
message DataSource {
    string name = 1;
    string bucket = 2;
    repeated string keys = 3;
}
message QoS {
    bool UseCache = 1;
    int32 FlushFreq = 2;
    int32 DurabilityInMem = 3;
    int32 DurabilityInDisk = 4;
}
message RegisterRequest {
    Credential cred = 1;
    DataSource datasource = 2;
    QoS qos = 3;
    ResourceInfo resource = 4;
}

message RegisterResponse {
    RC rc = 1;
    oneof response {
        RegisterSuccess regsucc = 2;
        RegisterError regerr = 3;
    }
}
message Policy {
    int32 chunkSize = 4;
    repeated string chunkKeys = 5;
}
message RedisAuth {
    string host = 1;
    int32 port = 2;
    string username = 3;
    string password = 4;
}
message JobInfo {
    string jobId = 1;
    string token = 2;
    google.protobuf.Timestamp createTime = 3;
    google.protobuf.Timestamp tokenTimeout = 4;
    RedisAuth redisauth = 5;
}
message RegisterSuccess {
    JobInfo jinfo = 1;
    Policy policy = 2;
}
message RegisterError {
    string error = 1;
}
// actively evict memory when DLT job deregister
message DeregisterRequest {
    Credential cred = 1;
    JobInfo jinfo = 2;
    bool deleteDataset = 3;
}
message DeregisterResponse {
    string response = 1;
}

// When key is not available, CC request GM to update policy
service CacheMiss {
    rpc call (CacheMissRequest) returns (CacheMissResponse) {}
}
message CacheMissRequest {
    Credential cred = 1;
    string key = 2;
}
message CacheMissResponse {
    bool response = 1;
}

service Heartbeat {
    rpc call (HearbeatMessage) returns (HearbeatMessage) {} 
}
message HearbeatMessage {
    Credential cred = 1;
    JobInfo jinfo = 2;
}

// CC periodically sends log messages tO GM
service Logger {
    rpc call (stream LogItem) returns (google.protobuf.Empty) {}
}
enum LogLevel {
    INFO = 0;
    DEBUG = 1;
    ERROR = 2;
}
message LogItem {
    google.protobuf.Timestamp time = 1;
    string jobId = 2;
    LogLevel level = 3;
    int32 epoch = 4;
    string details = 5;
}